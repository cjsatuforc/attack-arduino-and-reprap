#!/usr/bin/env python
# -*- coding: utf-8 -*-

# Demo of half automatically tamper RepRap's firmware through USB cable
#   to make its heat-end and print bed's actual temperature become half
#   of what you can see through 3DP control software like Printrun.
# Author: Claud Xiao <secmobi@gmail.com>

import sys
import os
import time
from IHex import *
from Utils import *


SPRINTER_THERMISTORTABLE_1 = ''.join(map(chr, [
            0x17, 0x00, 0x2C, 0x01, 0x19, 0x00, 0x27, 0x01, 0x1B, 0x00, 0x22, 0x01, 0x1C, 0x00, 0x1D, 0x01,
            0x1F, 0x00, 0x18, 0x01, 0x21, 0x00, 0x13, 0x01, 0x23, 0x00, 0x0E, 0x01, 0x26, 0x00, 0x09, 0x01,
            0x29, 0x00, 0x04, 0x01, 0x2C, 0x00, 0xFF, 0x00, 0x30, 0x00, 0xFA, 0x00, 0x34, 0x00, 0xF5, 0x00,
            0x38, 0x00, 0xF0, 0x00, 0x3D, 0x00, 0xEB, 0x00, 0x42, 0x00, 0xE6, 0x00, 0x47, 0x00, 0xE1, 0x00,
            0x4E, 0x00, 0xDC, 0x00, 0x54, 0x00, 0xD7, 0x00, 0x5C, 0x00, 0xD2, 0x00, 0x64, 0x00, 0xCD, 0x00,
            0x6D, 0x00, 0xC8, 0x00, 0x78, 0x00, 0xC3, 0x00, 0x83, 0x00, 0xBE, 0x00, 0x8F, 0x00, 0xB9, 0x00,
            0x9C, 0x00, 0xB4, 0x00, 0xAB, 0x00, 0xAF, 0x00, 0xBB, 0x00, 0xAA, 0x00, 0xCD, 0x00, 0xA5, 0x00,
            0xE0, 0x00, 0xA0, 0x00, 0xF5, 0x00, 0x9B, 0x00, 0x0C, 0x01, 0x96, 0x00, 0x25, 0x01, 0x91, 0x00,
            0x40, 0x01, 0x8C, 0x00, 0x5C, 0x01, 0x87, 0x00, 0x7B, 0x01, 0x82, 0x00, 0x9B, 0x01, 0x7D, 0x00,
            0xBD, 0x01, 0x78, 0x00, 0xE0, 0x01, 0x73, 0x00, 0x04, 0x02, 0x6E, 0x00, 0x29, 0x02, 0x69, 0x00,
            0x4F, 0x02, 0x64, 0x00, 0x74, 0x02, 0x5F, 0x00, 0x99, 0x02, 0x5A, 0x00, 0xBE, 0x02, 0x55, 0x00,
            0xE1, 0x02, 0x50, 0x00, 0x02, 0x03, 0x4B, 0x00, 0x21, 0x03, 0x46, 0x00, 0x3E, 0x03, 0x41, 0x00,
            0x59, 0x03, 0x3C, 0x00, 0x71, 0x03, 0x37, 0x00, 0x87, 0x03, 0x32, 0x00, 0x9A, 0x03, 0x2D, 0x00,
            0xAB, 0x03, 0x28, 0x00, 0xBA, 0x03, 0x23, 0x00, 0xC6, 0x03, 0x1E, 0x00, 0xD1, 0x03, 0x19, 0x00,
            0xD9, 0x03, 0x14, 0x00, 0xE1, 0x03, 0x0F, 0x00, 0xE7, 0x03, 0x0A, 0x00, 0xEC, 0x03, 0x05, 0x00,
            0xF0, 0x03, 0x00, 0x00 ]))

SPRINTER_THERMISTORTABLE_1_FIX = ''.join(map(chr, [
            0x17, 0x00, 0x58, 0x02, 0x19, 0x00, 0x4E, 0x02, 0x1B, 0x00, 0x44, 0x02, 0x1C, 0x00, 0x3A, 0x02,
            0x1F, 0x00, 0x30, 0x02, 0x21, 0x00, 0x26, 0x02, 0x23, 0x00, 0x1C, 0x02, 0x26, 0x00, 0x12, 0x02,
            0x29, 0x00, 0x08, 0x02, 0x2C, 0x00, 0xFE, 0x01, 0x30, 0x00, 0xF4, 0x01, 0x34, 0x00, 0xEA, 0x01,
            0x38, 0x00, 0xE0, 0x01, 0x3D, 0x00, 0xD6, 0x01, 0x42, 0x00, 0xCC, 0x01, 0x47, 0x00, 0xC2, 0x01,
            0x4E, 0x00, 0xB8, 0x01, 0x54, 0x00, 0xAE, 0x01, 0x5C, 0x00, 0xA4, 0x01, 0x64, 0x00, 0x9A, 0x01,
            0x6D, 0x00, 0x90, 0x01, 0x78, 0x00, 0x86, 0x01, 0x83, 0x00, 0x7C, 0x01, 0x8F, 0x00, 0x72, 0x01,
            0x9C, 0x00, 0x68, 0x01, 0xAB, 0x00, 0x5E, 0x01, 0xBB, 0x00, 0x54, 0x01, 0xCD, 0x00, 0x4A, 0x01,
            0xE0, 0x00, 0x40, 0x01, 0xF5, 0x00, 0x36, 0x01, 0x0C, 0x01, 0x2C, 0x01, 0x25, 0x01, 0x22, 0x01,
            0x40, 0x01, 0x18, 0x01, 0x5C, 0x01, 0x0E, 0x01, 0x7B, 0x01, 0x04, 0x01, 0x9B, 0x01, 0xFA, 0x00,
            0xBD, 0x01, 0xF0, 0x00, 0xE0, 0x01, 0xE6, 0x00, 0x04, 0x02, 0xDC, 0x00, 0x29, 0x02, 0xD2, 0x00,
            0x4F, 0x02, 0xC8, 0x00, 0x74, 0x02, 0xBE, 0x00, 0x99, 0x02, 0xB4, 0x00, 0xBE, 0x02, 0xAA, 0x00,
            0xE1, 0x02, 0xA0, 0x00, 0x02, 0x03, 0x96, 0x00, 0x21, 0x03, 0x8C, 0x00, 0x3E, 0x03, 0x82, 0x00,
            0x59, 0x03, 0x78, 0x00, 0x71, 0x03, 0x6E, 0x00, 0x87, 0x03, 0x64, 0x00, 0x9A, 0x03, 0x5A, 0x00,
            0xAB, 0x03, 0x50, 0x00, 0xBA, 0x03, 0x46, 0x00, 0xC6, 0x03, 0x3C, 0x00, 0xD1, 0x03, 0x32, 0x00,
            0xD9, 0x03, 0x28, 0x00, 0xE1, 0x03, 0x1E, 0x00, 0xE7, 0x03, 0x14, 0x00, 0xEC, 0x03, 0x0A, 0x00,
            0xF0, 0x03, 0x00, 0x00 ]))



def FindTable(bin):
    addrs = []
    data = open(bin, 'rb').read()
    a = data.find(SPRINTER_THERMISTORTABLE_1)
    while a != -1:
        addrs.append(a)
        a = data.find(SPRINTER_THERMISTORTABLE_1, a + len(SPRINTER_THERMISTORTABLE_1))

    return addrs


def FixBin(origin, target, addrs):
    data = open(origin, 'rb').read()

    l = len(SPRINTER_THERMISTORTABLE_1_FIX)
    for addr in addrs:
        fix = data[:addr] + SPRINTER_THERMISTORTABLE_1_FIX + data[addr+l:]
        data = fix

    open(target, 'wb').write(fix)


def HalfTemperature(serial):
    origin_hex = 'dump.hex'
    origin_bin = 'dump.bin'
    fixed_bin = 'fixed.bin'
    fixed_hex = 'fixed.hex'

    Log('Press the RESET button in your Sanguinololu board and hold on ...')
    time.sleep(10)
    Log('Relax it now!')
    time.sleep(1)

    Log('Download firmware from the board to ' + origin_hex) 
    os.system('avrdude -p atmega644p -c arduino -b 38400 -P ' + serial + ' -U flash:r:' + origin_hex + ':i')

    Log('Convert the dump to ' + origin_bin)
    Hex2Bin(origin_hex, origin_bin)

    Log('Find the thermistor table in the binary code')
    addrs = FindTable(origin_bin)
    if len(addrs) > 0:
        Log('Found the table at %s' % repr(addrs))
    else:
        ErrorAndExit('Couldn\'t found any thermistor table')

    Log('Fix the binary code to ' + fixed_bin)
    FixBin(origin_bin, fixed_bin, addrs)

    Log('Convert the binary code to' + fixed_hex)
    Bin2Hex(fixed_bin, fixed_hex)

    Log('Press the RESET button in your Sanguinololu board and hold on ...')
    time.sleep(10)
    Log('Relax it now!')
    time.sleep(1)

    Log('Upload fixed firmware to the board')
    os.system('avrdude -p atmega644p -c arduino -b 38400 -P ' + serial + ' -U flash:w:' + fixed_hex + ':i')

    Log('Done!')


if __name__ == '__main__':
    if len(sys.argv) != 2:
        print 'Usage: ' + __file__ + ' <usb_serial>'
        sys.exit(-1)

    HalfTemperature(sys.argv[1])
